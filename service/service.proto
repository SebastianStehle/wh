option go_package = "api/tunnel";

service WebhookService {
    rpc subscribe(stream ClientMessage) returns (stream ServerMessage);
}

message ClientMessage {
    oneof test_message_type {
        // The client subscribes to a path.
        SubscribeRequest subscribe = 1;

        // The client answers an request.
        ResponseStart response_start = 2;

        // The client answers an request.
        ResponseData response_data = 3;

        // The client answers with an error.
        TransportError error = 4;
    }
}

message ServerMessage {
    oneof test_message_type {
        // The server sends a request start.
        RequestStart request_start = 1;

        // The server sends a body request.
        RequestData request_data = 2;

        // The client answers with an error.
        TransportError error = 3;
    }
}

message SubscribeRequest {
    // The endpoint.
    required string endpoint = 1;
}

message RequestStart {
    // The unique request ID.
    required string request_id = 1;

    // The endpoint for debugging purposes.
    required string endpoint = 2;

    // The request path.
    required string path = 3;

    // The request method.
    required string method = 4;

    // The request headers.
    map<string, HttpHeaderValues> headers = 5;
}

message RequestData {
    // The unique request ID.
    required string request_id = 1;

    // The data chunk
    required bytes data = 2;

    // Indicates if the request is complete
    required bool completed = 3;
}

message ResponseStart {
    // The correlated request ID.
    required string request_id = 1;

    // The response headers.
    map<string, HttpHeaderValues> headers = 2;

    // The response status code.
    required int32 status = 3;
}

message ResponseData {
    // The unique request ID.
    required string request_id = 1;

    // The data chunk
    required bytes data = 2;

    // Indicates if the response is complete
    required bool completed = 3;
}

message TransportError {
    // The correlated request ID.
    required string request_id = 1;

    // The error message.
    required string error = 2;
}

message HttpHeaderValues {
    repeated string values = 1;
}